* interface tweaks
  #+BEGIN_SRC emacs-lisp
    ;; remove startup window when opening up emacs
    (setq inhibit-startup-message t)

    ;; remove tool bar from emacs window
    (tool-bar-mode -1)

    ;; change the default syntax for approval qustions
    (fset 'yes-or-no-p 'y-or-n-p)

    ;; reload buffer key binding to F6 
    (global-set-key (kbd "<f6>") 'revert-buffer)

    ;; toggle truncate long lines key binding
    (global-set-key (kbd "C-c l") 'toggle-truncate-lines)

    ;; compile key binding to F5
    (global-set-key (kbd "<f5>") 'compile)
  #+END_SRC
* try
  let's try packages without installing them
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t) 
  #+END_SRC
* which-key
  display keys and there descriptions
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config (which-key-mode))
  #+END_SRC
* Org-Mode Stuff
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
      (setq org-log-done t)
  #+END_SRC
* Swiper/Ivy/Counsel
  Swiper gives a really efficient incremental search with regular expressions
  and Ivy / Counsel replace a lot of ido or helms completion functionality
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :ensure t
      :bind
      (("M-y" . counsel-yank-pop)
       :map ivy-minibuffer-map
       ("M-y" . ivy-next-line)))


    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind
      (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "%d/%d ")
      (setq ivy-display-style 'fancy))


    (use-package swiper
      :ensure t
      :bind
      (("C-s" . swiper)
       ("C-r" . swiper)
       ("C-c C-r" . ivy-resume)
       ("C-x C-f" . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
  #+END_SRC
* ido mode
  #+BEGIN_SRC emacs-lisp
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
  #+END_SRC
* Aliases
  #+BEGIN_SRC emacs-lisp
    (defalias 'list-buffers 'ibuffer)  
  #+END_SRC
* ace-window
  package to move around emacs windows
  #+BEGIN_SRC emacs-lisp 
    (use-package ace-window
      :ensure t
      :init
      (progn
	;; use ace-window whenever pressing C-o
	(global-set-key [remap other-window] 'ace-window) 
	;; set bigger font size to the windows numbers
	(custom-set-faces
	 '(aw-leading-char-face
	   ((t (:inherit ace-jump-face-foreground :height 3.0)))))
	))
  #+END_SRC
* Auto Complete
  #+BEGIN_SRC emacs-lisp 
    (use-package auto-complete
      :ensure t
      :init
      (progn
	(ac-config-default)
	(global-auto-complete-mode t)
	))
  #+END_SRC 
* Appearance
** Themes
   #+BEGIN_SRC emacs-lisp
     (load-theme 'tango-dark t)   
   #+END_SRC
** Frame Font
   The Emacs frame font
   #+BEGIN_SRC emacs-lisp
     (set-frame-font "Inconsolata 10" nil t)
   #+END_SRC
** Fonts and Icons
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :ensure t)
   #+END_SRC
* Flycheck
  Syntax Checking For GNU Emacs
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))
  #+END_SRC
* Python
  #+BEGIN_SRC emacs-lisp
    (use-package jedi
      :ensure t
      :init
      (add-hook 'python-mode-hook 'jedi:setup)
      (add-hook 'python-mode-hook 'jedi:ac-setup))

    (use-package elpy
      :ensure t
      :config
      (elpy-enable))
  #+END_SRC
* Yasnippet
  Code snippets for Emacs\\
  [[https://github.com/joaotavora/yasnippet][yasnippet]]
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1))
  #+END_SRC
* Evil_Mode
  Evil is an extensible vi layer for Emacs.
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      :config
      (evil-mode 1))
  #+END_SRC
** Evil Collection
   Keybindings collection for evil-mode\\
   [[https://github.com/emacs-evil/evil-collection][evil-collection]]
   #+BEGIN_SRC emacs-lisp
     (use-package evil-collection
       :after evil
       :ensure t
       :config
       (evil-collection-init))
   #+END_SRC
* Org-evil
  Org-evil provides Org-mode extensions for Evil users\\
  [[https://github.com/GuiltyDolphin/org-evil][Org-evil]]
  #+BEGIN_SRC emacs-lisp
    (use-package org-evil
      :ensure t)
  #+END_SRC
* Undo Tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
  #+END_SRC
* Neotree
  A Emacs tree file navigator\\
  [[https://github.com/jaypei/emacs-neotree][neotree]]
  #+BEGIN_SRC emacs-lisp
    (use-package neotree
      :ensure t
      :config
      (global-set-key (kbd "<f8>") 'neotree-toggle)
      (setq neo-theme 'nerd))
  #+END_SRC
* Assembly
  nasm-mode is a major mode for editing NASM x86 assembly programs\\
  [[https://github.com/skeeto/nasm-mode][nasm-mode]]
  #+BEGIN_SRC emacs-lisp
    (use-package nasm-mode
      :ensure t
      :config
      (add-hook 'asm-mode-hook 'nasm-mode))
  #+END_SRC
* Projectile
  Projectile is a project interaction library for Emacs\\
  [[https://github.com/bbatsov/projectile][projectile]]
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (setq projectile-indexing-method 'native)
      (setq projectile-completion-system 'ivy)
      (projectile-mode))

    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-mode))
  #+END_SRC
* Misc Packages
** ag
   A front-end for ag ('the_silver_searcher')\\
   [[https://github.com/Wilfred/ag.el][ag.el]]
   #+BEGIN_SRC emacs-lisp
     (use-package ag
       :ensure t)
   #+END_SRC
